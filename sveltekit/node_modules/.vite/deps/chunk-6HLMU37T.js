// node_modules/.pnpm/htmlnano@2.1.1_postcss@8.4.38_terser@5.31.1_typescript@5.4.5/node_modules/htmlnano/lib/modules/removeRedundantAttributes.mjs
var redundantScriptTypes = /* @__PURE__ */ new Set([
  "application/javascript",
  "application/ecmascript",
  "application/x-ecmascript",
  "application/x-javascript",
  "text/javascript",
  "text/ecmascript",
  "text/javascript1.0",
  "text/javascript1.1",
  "text/javascript1.2",
  "text/javascript1.3",
  "text/javascript1.4",
  "text/javascript1.5",
  "text/jscript",
  "text/livescript",
  "text/x-ecmascript",
  "text/x-javascript"
]);
var missingValueDefaultAttributes = {
  "form": {
    "method": "get"
  },
  input: {
    type: "text"
  },
  button: {
    // https://html.spec.whatwg.org/multipage/form-elements.html#attr-button-type
    type: "submit"
  },
  "script": {
    "language": "javascript",
    "type": (attrs) => {
      for (const [attrName, attrValue] of Object.entries(attrs)) {
        if (attrName.toLowerCase() !== "type") {
          continue;
        }
        return redundantScriptTypes.has(attrValue);
      }
      return false;
    },
    // Remove attribute if the function returns false
    "charset": (attrs) => {
      return !attrs.src;
    }
  },
  "style": {
    "media": "all",
    "type": "text/css"
  },
  "link": {
    media: "all",
    "type": (attrs) => {
      let isRelStyleSheet = false;
      let isTypeTextCSS = false;
      if (attrs) {
        for (const [attrName, attrValue] of Object.entries(attrs)) {
          if (attrName.toLowerCase() === "rel" && attrValue === "stylesheet") {
            isRelStyleSheet = true;
          }
          if (attrName.toLowerCase() === "type" && attrValue === "text/css") {
            isTypeTextCSS = true;
          }
        }
      }
      return isRelStyleSheet && isTypeTextCSS;
    }
  },
  // See: https://html.spec.whatwg.org/#lazy-loading-attributes
  img: {
    "loading": "eager",
    // https://html.spec.whatwg.org/multipage/embedded-content.html#dom-img-decoding
    decoding: "auto"
  },
  iframe: {
    "loading": "eager"
  },
  // https://html.spec.whatwg.org/multipage/media.html#htmltrackelement
  track: {
    kind: "subtitles"
  },
  textarea: {
    // https://html.spec.whatwg.org/multipage/form-elements.html#dom-textarea-wrap
    wrap: "soft"
  },
  area: {
    // https://html.spec.whatwg.org/multipage/image-maps.html#attr-area-shape
    shape: "rect"
  }
};
var tagsHaveMissingValueDefaultAttributes = new Set(Object.keys(missingValueDefaultAttributes));
function onAttrs() {
  return (attrs, node) => {
    if (!node.tag) return attrs;
    const newAttrs = attrs;
    if (tagsHaveMissingValueDefaultAttributes.has(node.tag)) {
      const tagRedundantAttributes = missingValueDefaultAttributes[node.tag];
      for (const redundantAttributeName of Object.keys(tagRedundantAttributes)) {
        let tagRedundantAttributeValue = tagRedundantAttributes[redundantAttributeName];
        let isRemove = false;
        if (typeof tagRedundantAttributeValue === "function") {
          isRemove = tagRedundantAttributeValue(attrs);
        } else if (attrs[redundantAttributeName] === tagRedundantAttributeValue) {
          isRemove = true;
        }
        if (isRemove) {
          delete newAttrs[redundantAttributeName];
        }
      }
    }
    return newAttrs;
  };
}

export {
  redundantScriptTypes,
  onAttrs
};
//# sourceMappingURL=chunk-6HLMU37T.js.map
