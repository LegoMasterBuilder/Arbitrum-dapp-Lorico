{
  "version": 3,
  "sources": ["../../.pnpm/htmlnano@2.1.1_postcss@8.4.38_terser@5.31.1_typescript@5.4.5/node_modules/htmlnano/lib/modules/minifySvg.mjs"],
  "sourcesContent": ["import { optionalImport } from '../helpers.mjs';\n\n/** Minify SVG with SVGO */\nexport default async function minifySvg(tree, options, svgoOptions = {}) {\n    const svgo = await optionalImport('svgo');\n\n    if (!svgo) return tree;\n\n    tree.match({tag: 'svg'}, node => {\n        let svgStr = tree.render(node, { closingSingleTag: 'slash', quoteAllAttributes: true });\n        try {\n            const result = svgo.optimize(svgStr, svgoOptions);\n            node.tag = false;\n            node.attrs = {};\n            // result.data is a string, we need to cast it to an array\n            node.content = [result.data];\n            return node;\n        } catch (error) {\n            console.error('htmlnano fails to minify the svg:');\n            console.error(error);\n            if (error.name === 'SvgoParserError') {\n                console.error(error.toString());\n            }\n            // We return the node as-is\n            return node;\n        }\n    });\n\n    return tree;\n}\n"],
  "mappings": ";;;;;;AAGA,eAAO,UAAiC,MAAM,SAAS,cAAc,CAAC,GAAG;AACrE,QAAM,OAAO,MAAM,eAAe,MAAM;AAExC,MAAI,CAAC,KAAM,QAAO;AAElB,OAAK,MAAM,EAAC,KAAK,MAAK,GAAG,UAAQ;AAC7B,QAAI,SAAS,KAAK,OAAO,MAAM,EAAE,kBAAkB,SAAS,oBAAoB,KAAK,CAAC;AACtF,QAAI;AACA,YAAM,SAAS,KAAK,SAAS,QAAQ,WAAW;AAChD,WAAK,MAAM;AACX,WAAK,QAAQ,CAAC;AAEd,WAAK,UAAU,CAAC,OAAO,IAAI;AAC3B,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,cAAQ,MAAM,mCAAmC;AACjD,cAAQ,MAAM,KAAK;AACnB,UAAI,MAAM,SAAS,mBAAmB;AAClC,gBAAQ,MAAM,MAAM,SAAS,CAAC;AAAA,MAClC;AAEA,aAAO;AAAA,IACX;AAAA,EACJ,CAAC;AAED,SAAO;AACX;",
  "names": []
}
