import {
  require_timsort
} from "./chunk-JWTS53QH.js";
import {
  __toESM
} from "./chunk-P3KJJCU4.js";

// node_modules/.pnpm/htmlnano@2.1.1_postcss@8.4.38_terser@5.31.1_typescript@5.4.5/node_modules/htmlnano/lib/modules/sortAttributes.mjs
var import_timsort = __toESM(require_timsort(), 1);
var validOptions = /* @__PURE__ */ new Set(["frequency", "alphabetical"]);
var processModuleOptions = (options) => {
  if (options === true) return "alphabetical";
  return validOptions.has(options) ? options : false;
};
var AttributeTokenChain = class {
  constructor() {
    this.freqData = /* @__PURE__ */ new Map();
  }
  addFromNodeAttrs(nodeAttrs) {
    Object.keys(nodeAttrs).forEach((attrName) => {
      const attrNameLower = attrName.toLowerCase();
      if (this.freqData.has(attrNameLower)) {
        this.freqData.set(attrNameLower, this.freqData.get(attrNameLower) + 1);
      } else {
        this.freqData.set(attrNameLower, 1);
      }
    });
  }
  createSortOrder() {
    let _sortOrder = [...this.freqData.entries()];
    (0, import_timsort.sort)(_sortOrder, (a, b) => b[1] - a[1]);
    this.sortOrder = _sortOrder.map((i) => i[0]);
  }
  sortFromNodeAttrs(nodeAttrs) {
    const newAttrs = {};
    const loweredNodeAttrs = {};
    Object.entries(nodeAttrs).forEach(([attrName, attrValue]) => {
      loweredNodeAttrs[attrName.toLowerCase()] = attrValue;
    });
    if (!this.sortOrder) {
      this.createSortOrder();
    }
    this.sortOrder.forEach((attrNameLower) => {
      if (loweredNodeAttrs[attrNameLower] != null) {
        newAttrs[attrNameLower] = loweredNodeAttrs[attrNameLower];
      }
    });
    return newAttrs;
  }
};
function sortAttributes(tree, options, moduleOptions) {
  const sortType = processModuleOptions(moduleOptions);
  if (sortType === "alphabetical") {
    return sortAttributesInAlphabeticalOrder(tree);
  }
  if (sortType === "frequency") {
    return sortAttributesByFrequency(tree);
  }
  return tree;
}
function sortAttributesInAlphabeticalOrder(tree) {
  tree.walk((node) => {
    if (!node.attrs) {
      return node;
    }
    const newAttrs = {};
    Object.keys(node.attrs).sort((a, b) => typeof a.localeCompare === "function" ? a.localeCompare(b) : a - b).forEach((attr) => newAttrs[attr] = node.attrs[attr]);
    node.attrs = newAttrs;
    return node;
  });
  return tree;
}
function sortAttributesByFrequency(tree) {
  const tokenchain = new AttributeTokenChain();
  tree.walk((node) => {
    if (!node.attrs) {
      return node;
    }
    tokenchain.addFromNodeAttrs(node.attrs);
    return node;
  });
  tree.walk((node) => {
    if (!node.attrs) {
      return node;
    }
    node.attrs = tokenchain.sortFromNodeAttrs(node.attrs);
    return node;
  });
  return tree;
}
export {
  sortAttributes as default
};
//# sourceMappingURL=sortAttributes-FZUVP5MH.js.map
