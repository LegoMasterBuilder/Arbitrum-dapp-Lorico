{
  "version": 3,
  "sources": ["../../.pnpm/htmlnano@2.1.1_postcss@8.4.38_terser@5.31.1_typescript@5.4.5/node_modules/htmlnano/lib/modules/sortAttributesWithLists.mjs"],
  "sourcesContent": ["// class, rel, ping\nimport { sort as timSort } from 'timsort';\nimport { attributesWithLists } from './collapseAttributeWhitespace.mjs';\n\nconst validOptions = new Set(['frequency', 'alphabetical']);\nconst processModuleOptions = options => {\n    if (options === true) return 'alphabetical';\n\n    return validOptions.has(options) ? options : false;\n};\n\nclass AttributeTokenChain {\n    constructor() {\n        this.freqData = new Map(); // <attrValue, frequency>[]\n    }\n\n    addFromNodeAttrsArray(attrValuesArray) {\n        attrValuesArray.forEach(attrValue => {\n            if (this.freqData.has(attrValue)) {\n                this.freqData.set(attrValue, this.freqData.get(attrValue) + 1);\n            } else {\n                this.freqData.set(attrValue, 1);\n            }\n        });\n    }\n\n    createSortOrder() {\n        let _sortOrder = [...this.freqData.entries()];\n        timSort(_sortOrder, (a, b) => b[1] - a[1]);\n\n        this.sortOrder = _sortOrder.map(i => i[0]);\n    }\n\n    sortFromNodeAttrsArray(attrValuesArray) {\n        const resultArray = [];\n\n        if (!this.sortOrder) {\n            this.createSortOrder();\n        }\n\n        this.sortOrder.forEach(k => {\n            if (attrValuesArray.includes(k)) {\n                resultArray.push(k);\n            }\n        });\n\n        return resultArray;\n    }\n}\n\n/** Sort values inside list-like attributes (e.g. class, rel) */\nexport default function collapseAttributeWhitespace(tree, options, moduleOptions) {\n    const sortType = processModuleOptions(moduleOptions);\n\n    if (sortType === 'alphabetical') {\n        return sortAttributesWithListsInAlphabeticalOrder(tree);\n    }\n\n    if (sortType === 'frequency') {\n        return sortAttributesWithListsByFrequency(tree);\n    }\n\n    // Invalid configuration\n    return tree;\n}\n\nfunction sortAttributesWithListsInAlphabeticalOrder(tree) {\n    tree.walk(node => {\n        if (!node.attrs) {\n            return node;\n        }\n\n        Object.keys(node.attrs).forEach(attrName => {\n            const attrNameLower = attrName.toLowerCase();\n            if (!attributesWithLists.has(attrNameLower)) {\n                return;\n            }\n\n            const attrValues = node.attrs[attrName].split(/\\s/);\n\n            node.attrs[attrName] = attrValues.sort((a, b) => {\n                return typeof a.localeCompare === 'function' ? a.localeCompare(b) : a - b;\n            }).join(' ');\n        });\n\n        return node;\n    });\n\n    return tree;\n}\n\nfunction sortAttributesWithListsByFrequency(tree) {\n    const tokenChainObj = {}; // <attrNameLower: AttributeTokenChain>[]\n\n    // Traverse through tree to get frequency\n    tree.walk(node => {\n        if (!node.attrs) {\n            return node;\n        }\n\n        Object.entries(node.attrs).forEach(([attrName, attrValues]) => {\n            const attrNameLower = attrName.toLowerCase();\n\n            if (!attributesWithLists.has(attrNameLower)) {\n                return;\n            }\n\n            tokenChainObj[attrNameLower] = tokenChainObj[attrNameLower] || new AttributeTokenChain();\n            tokenChainObj[attrNameLower].addFromNodeAttrsArray(attrValues.split(/\\s/));\n        });\n\n        return node;\n    });\n\n    // Traverse through tree again, this time sort the attribute values\n    tree.walk(node => {\n        if (!node.attrs) {\n            return node;\n        }\n\n        Object.entries(node.attrs).forEach(([attrName, attrValues]) => {\n            const attrNameLower = attrName.toLowerCase();\n\n            if (!attributesWithLists.has(attrNameLower)) {\n                return;\n            }\n\n            if (tokenChainObj[attrNameLower]) {\n                node.attrs[attrName] = tokenChainObj[attrNameLower].sortFromNodeAttrsArray(attrValues.split(/\\s/)).join(' ');\n            }\n        });\n\n        return node;\n    });\n}\n"],
  "mappings": "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",
  "names": ["timSort"]
}
