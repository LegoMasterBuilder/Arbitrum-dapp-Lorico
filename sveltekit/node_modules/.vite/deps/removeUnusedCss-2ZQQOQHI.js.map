{
  "version": 3,
  "sources": ["../../.pnpm/htmlnano@2.1.1_postcss@8.4.38_terser@5.31.1_typescript@5.4.5/node_modules/htmlnano/lib/modules/removeUnusedCss.mjs"],
  "sourcesContent": ["import { isStyleNode, extractCssFromStyleNode, optionalImport } from '../helpers.mjs';\n\n// These options must be set and shouldn't be overriden to ensure uncss doesn't look at linked stylesheets.\nconst uncssOptions = {\n    ignoreSheets: [/\\s*/],\n    stylesheets: [],\n};\n\nfunction processStyleNodeUnCSS(html, styleNode, uncssOptions, uncss) {\n    const css = extractCssFromStyleNode(styleNode);\n\n    return runUncss(html, css, uncssOptions, uncss).then(css => {\n        // uncss may have left some style tags empty\n        if (css.trim().length === 0) {\n            styleNode.tag = false;\n            styleNode.content = [];\n            return;\n        }\n        styleNode.content = [css];\n    });\n}\n\nfunction runUncss(html, css, userOptions, uncss) {\n    if (typeof userOptions !== 'object') {\n        userOptions = {};\n    }\n\n    const options = { ...userOptions, ...uncssOptions };\n    return new Promise((resolve, reject) => {\n        options.raw = css;\n        uncss(html, options, (error, output) => {\n            if (error) {\n                reject(error);\n                return;\n            }\n            resolve(output);\n        });\n    });\n}\n\nconst purgeFromHtml = function (tree) {\n    // content is not used as we can directly used the parsed HTML,\n    // making the process faster\n    const selectors = [];\n\n    tree.walk(node => {\n        const classes = node.attrs && node.attrs.class && node.attrs.class.split(' ') || [];\n        const ids = node.attrs && node.attrs.id && node.attrs.id.split(' ') || [];\n        selectors.push(...classes, ...ids);\n        node.tag && selectors.push(node.tag);\n        return node;\n    });\n\n    return () => selectors;\n};\n\nfunction processStyleNodePurgeCSS(tree, styleNode, purgecssOptions, purgecss) {\n    const css = extractCssFromStyleNode(styleNode);\n    return runPurgecss(tree, css, purgecssOptions, purgecss)\n        .then(css => {\n            if (css.trim().length === 0) {\n                styleNode.tag = false;\n                styleNode.content = [];\n                return;\n            }\n            styleNode.content = [css];\n        });\n}\n\nfunction runPurgecss(tree, css, userOptions, purgecss) {\n    if (typeof userOptions !== 'object') {\n        userOptions = {};\n    }\n\n    const options = {\n        ...userOptions,\n        content: [{\n            raw: tree,\n            extension: 'html'\n        }],\n        css: [{\n            raw: css,\n            extension: 'css'\n        }],\n        extractors: [{\n            extractor: purgeFromHtml(tree),\n            extensions: ['html']\n        }]\n    };\n\n    return new purgecss.PurgeCSS()\n        .purge(options)\n        .then((result) => {\n            return result[0].css;\n        });\n}\n\n/** Remove unused CSS */\nexport default async function removeUnusedCss(tree, options, userOptions) {\n    const promises = [];\n    const html = userOptions.tool !== 'purgeCSS' && tree.render(tree);\n\n    const purgecss = await optionalImport('purgecss');\n    const uncss = await optionalImport('uncss');\n\n    tree.walk(node => {\n        if (isStyleNode(node)) {\n            if (userOptions.tool === 'purgeCSS') {\n                if (purgecss) {\n                    promises.push(processStyleNodePurgeCSS(tree, node, userOptions, purgecss));\n                }\n            } else {\n                if (uncss) {\n                    promises.push(processStyleNodeUnCSS(html, node, userOptions, uncss));\n                }\n            }\n        }\n        return node;\n    });\n\n    return Promise.all(promises).then(() => tree);\n}\n"],
  "mappings": "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",
  "names": ["uncssOptions", "css"]
}
