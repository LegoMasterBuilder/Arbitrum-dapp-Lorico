{
  "version": 3,
  "sources": ["../../.pnpm/htmlnano@2.1.1_postcss@8.4.38_terser@5.31.1_typescript@5.4.5/node_modules/htmlnano/lib/modules/mergeScripts.mjs"],
  "sourcesContent": ["/* Merge multiple <script> into one */\nexport default function mergeScripts (tree) {\n    let scriptNodesIndex = {};\n    let scriptSrcIndex = 1;\n\n    tree.match({ tag: 'script' }, node => {\n        const nodeAttrs = node.attrs || {};\n        if (\n            'src' in nodeAttrs\n            // Skip SRI, reasons are documented in \"minifyJs\" module\n            || 'integrity' in nodeAttrs\n        ) {\n            scriptSrcIndex++;\n            return node;\n        }\n\n        const scriptType = nodeAttrs.type || 'text/javascript';\n        if (scriptType !== 'text/javascript' && scriptType !== 'application/javascript') {\n            return node;\n        }\n\n        const scriptKey = JSON.stringify({\n            id: nodeAttrs.id,\n            class: nodeAttrs.class,\n            type: scriptType,\n            defer: nodeAttrs.defer !== undefined,\n            async: nodeAttrs.async !== undefined,\n            index: scriptSrcIndex,\n        });\n        if (!scriptNodesIndex[scriptKey]) {\n            scriptNodesIndex[scriptKey] = [];\n        }\n\n        scriptNodesIndex[scriptKey].push(node);\n        return node;\n    });\n\n    for (const scriptNodes of Object.values(scriptNodesIndex)) {\n        let lastScriptNode = scriptNodes.pop();\n        scriptNodes.reverse().forEach(scriptNode => {\n            let scriptContent = (scriptNode.content || []).join(' ');\n            scriptContent = scriptContent.trim();\n            if (scriptContent.slice(-1) !== ';') {\n                scriptContent += ';';\n            }\n\n            lastScriptNode.content = lastScriptNode.content || [];\n            lastScriptNode.content.unshift(scriptContent);\n\n            scriptNode.tag = false;\n            scriptNode.content = [];\n        });\n    }\n\n    return tree;\n}\n"],
  "mappings": ";;;AACe,SAAR,aAA+B,MAAM;AACxC,MAAI,mBAAmB,CAAC;AACxB,MAAI,iBAAiB;AAErB,OAAK,MAAM,EAAE,KAAK,SAAS,GAAG,UAAQ;AAClC,UAAM,YAAY,KAAK,SAAS,CAAC;AACjC,QACI,SAAS,aAEN,eAAe,WACpB;AACE;AACA,aAAO;AAAA,IACX;AAEA,UAAM,aAAa,UAAU,QAAQ;AACrC,QAAI,eAAe,qBAAqB,eAAe,0BAA0B;AAC7E,aAAO;AAAA,IACX;AAEA,UAAM,YAAY,KAAK,UAAU;AAAA,MAC7B,IAAI,UAAU;AAAA,MACd,OAAO,UAAU;AAAA,MACjB,MAAM;AAAA,MACN,OAAO,UAAU,UAAU;AAAA,MAC3B,OAAO,UAAU,UAAU;AAAA,MAC3B,OAAO;AAAA,IACX,CAAC;AACD,QAAI,CAAC,iBAAiB,SAAS,GAAG;AAC9B,uBAAiB,SAAS,IAAI,CAAC;AAAA,IACnC;AAEA,qBAAiB,SAAS,EAAE,KAAK,IAAI;AACrC,WAAO;AAAA,EACX,CAAC;AAED,aAAW,eAAe,OAAO,OAAO,gBAAgB,GAAG;AACvD,QAAI,iBAAiB,YAAY,IAAI;AACrC,gBAAY,QAAQ,EAAE,QAAQ,gBAAc;AACxC,UAAI,iBAAiB,WAAW,WAAW,CAAC,GAAG,KAAK,GAAG;AACvD,sBAAgB,cAAc,KAAK;AACnC,UAAI,cAAc,MAAM,EAAE,MAAM,KAAK;AACjC,yBAAiB;AAAA,MACrB;AAEA,qBAAe,UAAU,eAAe,WAAW,CAAC;AACpD,qBAAe,QAAQ,QAAQ,aAAa;AAE5C,iBAAW,MAAM;AACjB,iBAAW,UAAU,CAAC;AAAA,IAC1B,CAAC;AAAA,EACL;AAEA,SAAO;AACX;",
  "names": []
}
