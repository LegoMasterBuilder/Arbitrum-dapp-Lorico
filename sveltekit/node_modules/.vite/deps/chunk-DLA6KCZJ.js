// node_modules/.pnpm/htmlnano@2.1.1_postcss@8.4.38_terser@5.31.1_typescript@5.4.5/node_modules/htmlnano/lib/helpers.mjs
var ampBoilerplateAttributes = [
  "amp-boilerplate",
  "amp4ads-boilerplate",
  "amp4email-boilerplate"
];
function isAmpBoilerplate(node) {
  if (!node.attrs) {
    return false;
  }
  for (const attr of ampBoilerplateAttributes) {
    if (attr in node.attrs) {
      return true;
    }
  }
  return false;
}
function isComment(content) {
  if (typeof content === "string") {
    return content.trim().startsWith("<!--");
  }
  return false;
}
function isConditionalComment(content) {
  const clean = (content || "").trim();
  return clean.startsWith("<!--[if") || clean === "<!--<![endif]-->";
}
function isStyleNode(node) {
  return node.tag === "style" && !isAmpBoilerplate(node) && "content" in node && node.content.length > 0;
}
function extractCssFromStyleNode(node) {
  return Array.isArray(node.content) ? node.content.join(" ") : node.content;
}
function isEventHandler(attributeName) {
  return attributeName && attributeName.slice && attributeName.slice(0, 2).toLowerCase() === "on" && attributeName.length >= 5;
}
async function optionalImport(moduleName) {
  try {
    const module = await import(moduleName);
    return module.default || module;
  } catch (e) {
    if (e.code === "MODULE_NOT_FOUND" || e.code === "ERR_MODULE_NOT_FOUND") {
      return null;
    }
    throw e;
  }
}

export {
  isAmpBoilerplate,
  isComment,
  isConditionalComment,
  isStyleNode,
  extractCssFromStyleNode,
  isEventHandler,
  optionalImport
};
//# sourceMappingURL=chunk-DLA6KCZJ.js.map
