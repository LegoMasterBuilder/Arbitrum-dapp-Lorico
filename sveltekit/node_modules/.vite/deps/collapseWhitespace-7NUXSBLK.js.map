{
  "version": 3,
  "sources": ["../../.pnpm/htmlnano@2.1.1_postcss@8.4.38_terser@5.31.1_typescript@5.4.5/node_modules/htmlnano/lib/modules/collapseWhitespace.mjs"],
  "sourcesContent": ["import { isComment } from '../helpers.mjs';\n\nconst noWhitespaceCollapseElements = new Set([\n    'script',\n    'style',\n    'pre',\n    'textarea'\n]);\n\nconst noTrimWhitespacesArroundElements = new Set([\n    // non-empty tags that will maintain whitespace around them\n    'a', 'abbr', 'acronym', 'b', 'bdi', 'bdo', 'big', 'button', 'cite', 'code', 'del', 'dfn', 'em', 'font', 'i', 'ins', 'kbd', 'label', 'mark', 'math', 'nobr', 'object', 'q', 'rp', 'rt', 'rtc', 'ruby', 's', 'samp', 'select', 'small', 'span', 'strike', 'strong', 'sub', 'sup', 'svg', 'textarea', 'time', 'tt', 'u', 'var',\n    // self-closing tags that will maintain whitespace around them\n    'comment', 'img', 'input', 'wbr'\n]);\n\nconst noTrimWhitespacesInsideElements = new Set([\n    // non-empty tags that will maintain whitespace within them\n    'a', 'abbr', 'acronym', 'b', 'big', 'del', 'em', 'font', 'i', 'ins', 'kbd', 'mark', 'nobr', 'rp', 's', 'samp', 'small', 'span', 'strike', 'strong', 'sub', 'sup', 'time', 'tt', 'u', 'var'\n]);\n\nconst startsWithWhitespacePattern = /^\\s/;\nconst endsWithWhitespacePattern = /\\s$/;\n// See https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace and https://infra.spec.whatwg.org/#ascii-whitespace\nconst multipleWhitespacePattern = /[\\t\\n\\f\\r ]+/g;\nconst NONE = '';\nconst SINGLE_SPACE = ' ';\nconst validOptions = ['all', 'aggressive', 'conservative'];\n\n/** Collapses redundant whitespaces */\nexport default function collapseWhitespace(tree, options, collapseType, parent) {\n    collapseType = validOptions.includes(collapseType) ? collapseType : 'conservative';\n\n    tree.forEach((node, index) => {\n        const prevNode = tree[index - 1];\n        const nextNode = tree[index + 1];\n\n        if (typeof node === 'string') {\n            const parentNodeTag = parent && parent.node && parent.node.tag;\n            const isTopLevel = !parentNodeTag || parentNodeTag === 'html' || parentNodeTag === 'head';\n            const shouldTrim = (\n                collapseType === 'all' ||\n                isTopLevel ||\n                /*\n                 * When collapseType is set to 'aggressive', and the tag is not inside 'noTrimWhitespacesInsideElements'.\n                 * the first & last space inside the tag will be trimmed\n                 */\n                collapseType === 'aggressive'\n            );\n\n            node = collapseRedundantWhitespaces(node, collapseType, shouldTrim, parent, prevNode, nextNode);\n        }\n\n        const isAllowCollapseWhitespace = !noWhitespaceCollapseElements.has(node.tag);\n        if (node.content && node.content.length && isAllowCollapseWhitespace) {\n            node.content = collapseWhitespace(node.content, options, collapseType, {\n                node,\n                prevNode,\n                nextNode\n            });\n        }\n\n        tree[index] = node;\n    });\n\n    return tree;\n}\n\n\nfunction collapseRedundantWhitespaces(text, collapseType, shouldTrim = false, parent, prevNode, nextNode) {\n    if (!text || text.length === 0) {\n        return NONE;\n    }\n\n    if (!isComment(text)) {\n        text = text.replace(multipleWhitespacePattern, SINGLE_SPACE);\n    }\n\n    if (shouldTrim) {\n        if (collapseType === 'aggressive') {\n            if (!noTrimWhitespacesInsideElements.has(parent && parent.node && parent.node.tag)) {\n                if (\n                    // It is the first child node of the parent\n                    !prevNode\n                    // It is not the first child node, and prevNode not a text node, and prevNode is safe to trim around\n                    || prevNode && prevNode.tag && !noTrimWhitespacesArroundElements.has(prevNode.tag)\n                ) {\n                    text = text.trimStart();\n                } else {\n                    // previous node is a \"no trim whitespaces arround element\"\n                    if (\n                        // but previous node ends with a whitespace\n                        prevNode && prevNode.content && prevNode.content.length\n                        && endsWithWhitespacePattern.test(prevNode.content[prevNode.content.length - 1])\n                        && (\n                            !nextNode // either the current node is the last child of the parent\n                            || (\n                                // or the next node starts with a white space\n                                nextNode && nextNode.content && nextNode.content.length\n                                && !startsWithWhitespacePattern.test(nextNode.content[0])\n                            )\n                        )\n                    ) {\n                        text = text.trimStart();\n                    }\n                }\n\n                if (\n                    !nextNode\n                    || nextNode && nextNode.tag && !noTrimWhitespacesArroundElements.has(nextNode.tag)\n                ) {\n                    text = text.trimEnd();\n                }\n            } else {\n                // now it is a textNode inside a \"no trim whitespaces inside elements\" node\n                if (\n                    !prevNode // it the textnode is the first child of the node\n                    && startsWithWhitespacePattern.test(text[0]) // it starts with white space\n                    && typeof parent.prevNode === 'string' // the prev of the node is a textNode as well\n                    && endsWithWhitespacePattern.test(parent.prevNode[parent.prevNode.length - 1]) // that prev is ends with a white\n                ) {\n                    text = text.trimStart();\n                }\n            }\n        } else {\n            // collapseType is 'all', trim spaces\n            text = text.trim();\n        }\n    }\n\n    return text;\n}\n"],
  "mappings": "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",
  "names": []
}
