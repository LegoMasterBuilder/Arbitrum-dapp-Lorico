{
  "version": 3,
  "sources": ["../../.pnpm/htmlnano@2.1.1_postcss@8.4.38_terser@5.31.1_typescript@5.4.5/node_modules/htmlnano/lib/modules/example.mjs"],
  "sourcesContent": ["/**\n * It is an example htmlnano module.\n *\n * A htmlnano module can be modify the attributes of every node (through a \"onAttrs\" named export),\n * modify the content of every node (through an optional \"onContent\" named export), modify the node\n * itself (through an optional \"onNode\" named export), or modify the entire tree (through an optional\n * default export).\n */\n\n/**\n * Modify attributes of node. Optional.\n *\n * @param {object} options - Options that were passed to htmlnano\n * @param moduleOptions — Module options. For most modules this is just \"true\" (indication that the module was enabled)\n * @return {Function} - Return a function that takes attribute object and the node (for the context), and returns the modified attribute object\n */\nexport function onAttrs(options, moduleOptions) {\n    return (attrs, node) => {\n        // You can modify \"attrs\" based on \"node\"\n        const newAttrs = { ...attrs };\n\n        return newAttrs; // ... then return the modified attrs\n    };\n}\n\n/**\n * Modify content of node. Optional.\n *\n * @param {object} options - Options that were passed to htmlnano\n * @param moduleOptions — Module options. For most modules this is just \"true\" (indication that the module was enabled)\n * @return {Function} - Return a function that takes contents (an array of node and string) and the node (for the context), and returns the modified content array.\n */\nexport function onContent(options, moduleOptions) {\n    return (content, node) => {\n        // Same goes the \"content\"\n\n        return content; // ... return modified content here\n    };\n}\n\n/**\n * It is possible to modify entire ndde as well. Optional.\n * @param {object} options - Options that were passed to htmlnano\n * @param moduleOptions — Module options. For most modules this is just \"true\" (indication that the module was enabled)\n * @return {Function} - Return a function that takes the node, and returns the new, modified node.\n */\nexport function onNode(options, moduleOptions) {\n    return (node) => {\n        return node; // ... return new node here\n    };\n}\n\n/**\n * Modify the entire tree. Optional.\n *\n * @param {object} tree - PostHTML tree (https://github.com/posthtml/posthtml/blob/master/README.md)\n * @param {object} options - Options that were passed to htmlnano\n * @param moduleOptions — Module options. For most modules this is just \"true\" (indication that the module was enabled)\n * @return {object | Proimse} - Return the modified tree.\n */\nexport default function example(tree, options, moduleOptions) {\n    // Module filename (example.es6), exported default function name (example),\n    // and test filename (example.js) must be the same.\n\n    // You can traverse the tree...\n    tree.walk(node => {\n        // ...and make some minification\n    });\n\n    // At the end you must return the tree\n    return tree;\n\n    // Or a promise with the tree\n    return somePromise.then(() => tree);\n}\n"],
  "mappings": ";;;AAgBO,SAAS,QAAQ,SAAS,eAAe;AAC5C,SAAO,CAAC,OAAO,SAAS;AAEpB,UAAM,WAAW,EAAE,GAAG,MAAM;AAE5B,WAAO;AAAA,EACX;AACJ;AASO,SAAS,UAAU,SAAS,eAAe;AAC9C,SAAO,CAAC,SAAS,SAAS;AAGtB,WAAO;AAAA,EACX;AACJ;AAQO,SAAS,OAAO,SAAS,eAAe;AAC3C,SAAO,CAAC,SAAS;AACb,WAAO;AAAA,EACX;AACJ;AAUe,SAAR,QAAyB,MAAM,SAAS,eAAe;AAK1D,OAAK,KAAK,UAAQ;AAAA,EAElB,CAAC;AAGD,SAAO;AAGP,SAAO,YAAY,KAAK,MAAM,IAAI;AACtC;",
  "names": []
}
