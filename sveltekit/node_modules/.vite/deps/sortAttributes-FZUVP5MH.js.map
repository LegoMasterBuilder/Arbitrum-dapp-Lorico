{
  "version": 3,
  "sources": ["../../.pnpm/htmlnano@2.1.1_postcss@8.4.38_terser@5.31.1_typescript@5.4.5/node_modules/htmlnano/lib/modules/sortAttributes.mjs"],
  "sourcesContent": ["import { sort as timSort } from 'timsort';\n\nconst validOptions = new Set(['frequency', 'alphabetical']);\n\nconst processModuleOptions = options => {\n    if (options === true) return 'alphabetical';\n\n    return validOptions.has(options) ? options : false;\n};\n\nclass AttributeTokenChain {\n    constructor() {\n        this.freqData = new Map(); // <attr, frequency>[]\n    }\n\n    addFromNodeAttrs(nodeAttrs) {\n        Object.keys(nodeAttrs).forEach(attrName => {\n            const attrNameLower = attrName.toLowerCase();\n\n            if (this.freqData.has(attrNameLower)) {\n                this.freqData.set(attrNameLower, this.freqData.get(attrNameLower) + 1);\n            } else {\n                this.freqData.set(attrNameLower, 1);\n            }\n        });\n    }\n\n    createSortOrder() {\n        let _sortOrder = [...this.freqData.entries()];\n        timSort(_sortOrder, (a, b) => b[1] - a[1]);\n\n        this.sortOrder = _sortOrder.map(i => i[0]);\n    }\n\n    sortFromNodeAttrs(nodeAttrs) {\n        const newAttrs = {};\n\n        // Convert node.attrs attrName into lower case.\n        const loweredNodeAttrs = {};\n        Object.entries(nodeAttrs).forEach(([attrName, attrValue]) => {\n            loweredNodeAttrs[attrName.toLowerCase()] = attrValue;\n        });\n\n        if (!this.sortOrder) {\n            this.createSortOrder();\n        }\n\n        this.sortOrder.forEach(attrNameLower => {\n            // The attrName inside \"sortOrder\" has been lowered\n            if (loweredNodeAttrs[attrNameLower] != null) {\n                newAttrs[attrNameLower] = loweredNodeAttrs[attrNameLower];\n            }\n        });\n\n        return newAttrs;\n    }\n}\n\n/** Sort attibutes */\nexport default function sortAttributes(tree, options, moduleOptions) {\n    const sortType = processModuleOptions(moduleOptions);\n\n    if (sortType === 'alphabetical') {\n        return sortAttributesInAlphabeticalOrder(tree);\n    }\n\n    if (sortType === 'frequency') {\n        return sortAttributesByFrequency(tree);\n    }\n\n    // Invalid configuration\n    return tree;\n}\n\nfunction sortAttributesInAlphabeticalOrder(tree) {\n    tree.walk(node => {\n        if (!node.attrs) {\n            return node;\n        }\n\n        const newAttrs = {};\n\n        Object.keys(node.attrs)\n            .sort((a, b) => typeof a.localeCompare === 'function' ? a.localeCompare(b) : a - b)\n            .forEach(attr => newAttrs[attr] = node.attrs[attr]);\n\n        node.attrs = newAttrs;\n\n        return node;\n    });\n\n    return tree;\n}\n\nfunction sortAttributesByFrequency(tree) {\n    const tokenchain = new AttributeTokenChain();\n\n    // Traverse through tree to get frequency\n    tree.walk(node => {\n        if (!node.attrs) {\n            return node;\n        }\n\n        tokenchain.addFromNodeAttrs(node.attrs);\n\n        return node;\n    });\n\n    // Traverse through tree again, this time sort the attributes\n    tree.walk(node => {\n        if (!node.attrs) {\n            return node;\n        }\n\n        node.attrs = tokenchain.sortFromNodeAttrs(node.attrs);\n\n        return node;\n    });\n\n    return tree;\n}\n"],
  "mappings": ";;;;;;;;AAAA,qBAAgC;AAEhC,IAAM,eAAe,oBAAI,IAAI,CAAC,aAAa,cAAc,CAAC;AAE1D,IAAM,uBAAuB,aAAW;AACpC,MAAI,YAAY,KAAM,QAAO;AAE7B,SAAO,aAAa,IAAI,OAAO,IAAI,UAAU;AACjD;AAEA,IAAM,sBAAN,MAA0B;AAAA,EACtB,cAAc;AACV,SAAK,WAAW,oBAAI,IAAI;AAAA,EAC5B;AAAA,EAEA,iBAAiB,WAAW;AACxB,WAAO,KAAK,SAAS,EAAE,QAAQ,cAAY;AACvC,YAAM,gBAAgB,SAAS,YAAY;AAE3C,UAAI,KAAK,SAAS,IAAI,aAAa,GAAG;AAClC,aAAK,SAAS,IAAI,eAAe,KAAK,SAAS,IAAI,aAAa,IAAI,CAAC;AAAA,MACzE,OAAO;AACH,aAAK,SAAS,IAAI,eAAe,CAAC;AAAA,MACtC;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,kBAAkB;AACd,QAAI,aAAa,CAAC,GAAG,KAAK,SAAS,QAAQ,CAAC;AAC5C,uBAAAA,MAAQ,YAAY,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;AAEzC,SAAK,YAAY,WAAW,IAAI,OAAK,EAAE,CAAC,CAAC;AAAA,EAC7C;AAAA,EAEA,kBAAkB,WAAW;AACzB,UAAM,WAAW,CAAC;AAGlB,UAAM,mBAAmB,CAAC;AAC1B,WAAO,QAAQ,SAAS,EAAE,QAAQ,CAAC,CAAC,UAAU,SAAS,MAAM;AACzD,uBAAiB,SAAS,YAAY,CAAC,IAAI;AAAA,IAC/C,CAAC;AAED,QAAI,CAAC,KAAK,WAAW;AACjB,WAAK,gBAAgB;AAAA,IACzB;AAEA,SAAK,UAAU,QAAQ,mBAAiB;AAEpC,UAAI,iBAAiB,aAAa,KAAK,MAAM;AACzC,iBAAS,aAAa,IAAI,iBAAiB,aAAa;AAAA,MAC5D;AAAA,IACJ,CAAC;AAED,WAAO;AAAA,EACX;AACJ;AAGe,SAAR,eAAgC,MAAM,SAAS,eAAe;AACjE,QAAM,WAAW,qBAAqB,aAAa;AAEnD,MAAI,aAAa,gBAAgB;AAC7B,WAAO,kCAAkC,IAAI;AAAA,EACjD;AAEA,MAAI,aAAa,aAAa;AAC1B,WAAO,0BAA0B,IAAI;AAAA,EACzC;AAGA,SAAO;AACX;AAEA,SAAS,kCAAkC,MAAM;AAC7C,OAAK,KAAK,UAAQ;AACd,QAAI,CAAC,KAAK,OAAO;AACb,aAAO;AAAA,IACX;AAEA,UAAM,WAAW,CAAC;AAElB,WAAO,KAAK,KAAK,KAAK,EACjB,KAAK,CAAC,GAAG,MAAM,OAAO,EAAE,kBAAkB,aAAa,EAAE,cAAc,CAAC,IAAI,IAAI,CAAC,EACjF,QAAQ,UAAQ,SAAS,IAAI,IAAI,KAAK,MAAM,IAAI,CAAC;AAEtD,SAAK,QAAQ;AAEb,WAAO;AAAA,EACX,CAAC;AAED,SAAO;AACX;AAEA,SAAS,0BAA0B,MAAM;AACrC,QAAM,aAAa,IAAI,oBAAoB;AAG3C,OAAK,KAAK,UAAQ;AACd,QAAI,CAAC,KAAK,OAAO;AACb,aAAO;AAAA,IACX;AAEA,eAAW,iBAAiB,KAAK,KAAK;AAEtC,WAAO;AAAA,EACX,CAAC;AAGD,OAAK,KAAK,UAAQ;AACd,QAAI,CAAC,KAAK,OAAO;AACb,aAAO;AAAA,IACX;AAEA,SAAK,QAAQ,WAAW,kBAAkB,KAAK,KAAK;AAEpD,WAAO;AAAA,EACX,CAAC;AAED,SAAO;AACX;",
  "names": ["timSort"]
}
