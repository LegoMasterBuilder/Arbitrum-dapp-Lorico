{
  "version": 3,
  "sources": ["../../.pnpm/htmlnano@2.1.1_postcss@8.4.38_terser@5.31.1_typescript@5.4.5/node_modules/htmlnano/lib/modules/minifyUrls.mjs"],
  "sourcesContent": ["import { optionalImport } from '../helpers.mjs';\n\n// Adopts from https://github.com/kangax/html-minifier/blob/51ce10f4daedb1de483ffbcccecc41be1c873da2/src/htmlminifier.js#L209-L221\nconst tagsHaveUriValuesForAttributes = new Set([\n    'a',\n    'area',\n    'link',\n    'base',\n    'object',\n    'blockquote',\n    'q',\n    'del',\n    'ins',\n    'form',\n    'input',\n    'head',\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'script',\n    'track',\n    'video',\n]);\n\nconst tagsHasHrefAttributes = new Set([\n    'a',\n    'area',\n    'link',\n    'base'\n]);\n\nconst attributesOfImgTagHasUriValues = new Set([\n    'src',\n    'longdesc',\n    'usemap'\n]);\n\nconst attributesOfObjectTagHasUriValues = new Set([\n    'classid',\n    'codebase',\n    'data',\n    'usemap'\n]);\n\nconst tagsHasCiteAttributes = new Set([\n    'blockquote',\n    'q',\n    'ins',\n    'del'\n]);\n\nconst tagsHasSrcAttributes = new Set([\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'track',\n    'video',\n    /**\n     * https://html.spec.whatwg.org/#attr-source-src\n     *\n     * Although most of browsers recommend not to use \"src\" in <source>,\n     * but technically it does comply with HTML Standard.\n     */\n    'source'\n]);\n\nconst isUriTypeAttribute = (tag, attr) => {\n    return (\n        tagsHasHrefAttributes.has(tag) && attr === 'href' ||\n        tag === 'img' && attributesOfImgTagHasUriValues.has(attr) ||\n        tag === 'object' && attributesOfObjectTagHasUriValues.has(attr) ||\n        tagsHasCiteAttributes.has(tag) && attr === 'cite' ||\n        tag === 'form' && attr === 'action' ||\n        tag === 'input' && attr === 'usemap' ||\n        tag === 'head' && attr === 'profile' ||\n        tag === 'script' && attr === 'for' ||\n        tagsHasSrcAttributes.has(tag) && attr === 'src'\n    );\n};\n\nconst isSrcsetAttribute = (tag, attr) => {\n    return (\n        tag === 'source' && attr === 'srcset' ||\n        tag === 'img' && attr === 'srcset' ||\n        tag === 'link' && attr === 'imagesrcset'\n    );\n};\n\nconst processModuleOptions = options => {\n    // FIXME!\n    // relateurl@1.0.0-alpha only supports URL while stable version (0.2.7) only supports string\n    // should convert input into URL instance after relateurl@1 is stable\n    if (typeof options === 'string') return options;\n    if (options instanceof URL) return options.toString();\n\n    return false;\n};\n\nconst isLinkRelCanonical = ({ tag, attrs }) => {\n    // Return false early for non-\"link\" tag\n    if (tag !== 'link') return false;\n\n    for (const [attrName, attrValue] of Object.entries(attrs)) {\n        if (attrName.toLowerCase() === 'rel' && attrValue === 'canonical') return true;\n    }\n\n    return false;\n};\n\nconst JAVASCRIPT_URL_PROTOCOL = 'javascript:';\n\nlet relateUrlInstance;\nlet STORED_URL_BASE;\n\n/** Convert absolute url into relative url */\nexport default async function minifyUrls(tree, options, moduleOptions) {\n    const RelateUrl = await optionalImport('relateurl');\n    const srcset = await optionalImport('srcset');\n    const terser = await optionalImport('terser');\n\n    let promises = [];\n\n    const urlBase = processModuleOptions(moduleOptions);\n\n    // Invalid configuration, return tree directly\n    if (!urlBase) return tree;\n\n    /** Bring up a reusable RelateUrl instances (only once)\n     *\n     * STORED_URL_BASE is used to invalidate RelateUrl instances,\n     * avoiding require.cache acrossing multiple htmlnano instance with different configuration,\n     * e.g. unit tests cases.\n     */\n    if (!relateUrlInstance || STORED_URL_BASE !== urlBase) {\n        if (RelateUrl) {\n            relateUrlInstance = new RelateUrl(urlBase);\n        }\n        STORED_URL_BASE = urlBase;\n    }\n\n    tree.walk(node => {\n        if (!node.attrs) return node;\n\n        if (!node.tag) return node;\n\n        if (!tagsHaveUriValuesForAttributes.has(node.tag)) return node;\n\n        // Prevent link[rel=canonical] being processed\n        // Can't be excluded by isUriTypeAttribute()\n        if (isLinkRelCanonical(node)) return node;\n\n        for (const [attrName, attrValue] of Object.entries(node.attrs)) {\n            const attrNameLower = attrName.toLowerCase();\n\n            if (isUriTypeAttribute(node.tag, attrNameLower)) {\n                if (isJavaScriptUrl(attrValue)) {\n                    promises.push(minifyJavaScriptUrl(node, attrName, terser));\n                } else {\n                    if (relateUrlInstance) {\n                        // FIXME!\n                        // relateurl@1.0.0-alpha only supports URL while stable version (0.2.7) only supports string\n                        // the WHATWG URL API is very strict while attrValue might not be a valid URL\n                        // new URL should be used, and relateUrl#relate should be wrapped in try...catch after relateurl@1 is stable\n                        node.attrs[attrName] = relateUrlInstance.relate(attrValue);\n                    }\n                }\n\n                continue;\n            }\n\n            if (isSrcsetAttribute(node.tag, attrNameLower)) {\n                if (srcset) {\n                    try {\n                        const parsedSrcset = srcset.parseSrcset(attrValue, { strict: true });\n\n                        node.attrs[attrName] = srcset.stringifySrcset(parsedSrcset.map(item => {\n                            if (relateUrlInstance) {\n                                item.url = relateUrlInstance.relate(item.url);\n                            }\n\n                            return item;\n                        }));\n                    } catch (e) {\n                        // srcset will throw an Error for invalid srcset.\n                    }\n                }\n\n                continue;\n            }\n        }\n\n        return node;\n    });\n\n    if (promises.length > 0) return Promise.all(promises).then(() => tree);\n    return Promise.resolve(tree);\n}\n\nfunction isJavaScriptUrl(url) {\n    return typeof url === 'string' && url.toLowerCase().startsWith(JAVASCRIPT_URL_PROTOCOL);\n}\n\nconst jsWrapperStart = 'function a(){';\nconst jsWrapperEnd = '}a();';\n\nfunction minifyJavaScriptUrl(node, attrName, terser) {\n    if (!terser) return Promise.resolve();\n\n    let result = node.attrs[attrName];\n    if (result) {\n        result = jsWrapperStart + result.slice(JAVASCRIPT_URL_PROTOCOL.length) + jsWrapperEnd;\n\n        return terser\n            .minify(result, {}) // Default Option is good enough\n            .then(({ code }) => {\n                const minifiedJs = code.substring(\n                    jsWrapperStart.length,\n                    code.length - jsWrapperEnd.length\n                );\n                node.attrs[attrName] = JAVASCRIPT_URL_PROTOCOL + minifiedJs;\n            });\n    }\n\n    return Promise.resolve();\n}\n"],
  "mappings": "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",
  "names": []
}
