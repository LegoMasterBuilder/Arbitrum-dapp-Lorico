import {
  isComment,
  isConditionalComment
} from "./chunk-DLA6KCZJ.js";
import "./chunk-P3KJJCU4.js";

// node_modules/.pnpm/htmlnano@2.1.1_postcss@8.4.38_terser@5.31.1_typescript@5.4.5/node_modules/htmlnano/lib/modules/removeComments.mjs
var MATCH_EXCERPT_REGEXP = /<!-- ?more ?-->/i;
function onNode(options, removeType) {
  if (removeType !== "all" && removeType !== "safe" && !isMatcher(removeType)) {
    removeType = "safe";
  }
  return (node) => {
    if (isCommentToRemove(node, removeType)) {
      return "";
    }
    return node;
  };
}
function onContent(options, removeType) {
  if (removeType !== "all" && removeType !== "safe" && !isMatcher(removeType)) {
    removeType = "safe";
  }
  return (contents) => {
    return contents.filter((content) => !isCommentToRemove(content, removeType));
  };
}
function isCommentToRemove(text, removeType) {
  if (typeof text !== "string") {
    return false;
  }
  if (!isComment(text)) {
    return false;
  }
  if (removeType === "safe") {
    const isNoindex = text === "<!--noindex-->" || text === "<!--/noindex-->";
    if (isNoindex) {
      return false;
    }
    const isServerSideExclude = text === "<!--sse-->" || text === "<!--/sse-->";
    if (isServerSideExclude) {
      return false;
    }
    if (isConditionalComment(text)) {
      return false;
    }
    const isCMSExcerptComment = MATCH_EXCERPT_REGEXP.test(text);
    if (isCMSExcerptComment) {
      return false;
    }
  }
  if (isMatcher(removeType)) {
    return isMatch(text, removeType);
  }
  return true;
}
function isMatch(input, matcher) {
  if (matcher instanceof RegExp) {
    return matcher.test(input);
  }
  if (typeof matcher === "function") {
    return Boolean(matcher(input));
  }
  return false;
}
function isMatcher(matcher) {
  if (matcher instanceof RegExp || typeof matcher === "function") {
    return true;
  }
  return false;
}
export {
  onContent,
  onNode
};
//# sourceMappingURL=removeComments-POKJONGL.js.map
