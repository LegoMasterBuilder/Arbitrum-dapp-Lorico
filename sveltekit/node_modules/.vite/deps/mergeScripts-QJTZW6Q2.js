import "./chunk-P3KJJCU4.js";

// node_modules/.pnpm/htmlnano@2.1.1_postcss@8.4.38_terser@5.31.1_typescript@5.4.5/node_modules/htmlnano/lib/modules/mergeScripts.mjs
function mergeScripts(tree) {
  let scriptNodesIndex = {};
  let scriptSrcIndex = 1;
  tree.match({ tag: "script" }, (node) => {
    const nodeAttrs = node.attrs || {};
    if ("src" in nodeAttrs || "integrity" in nodeAttrs) {
      scriptSrcIndex++;
      return node;
    }
    const scriptType = nodeAttrs.type || "text/javascript";
    if (scriptType !== "text/javascript" && scriptType !== "application/javascript") {
      return node;
    }
    const scriptKey = JSON.stringify({
      id: nodeAttrs.id,
      class: nodeAttrs.class,
      type: scriptType,
      defer: nodeAttrs.defer !== void 0,
      async: nodeAttrs.async !== void 0,
      index: scriptSrcIndex
    });
    if (!scriptNodesIndex[scriptKey]) {
      scriptNodesIndex[scriptKey] = [];
    }
    scriptNodesIndex[scriptKey].push(node);
    return node;
  });
  for (const scriptNodes of Object.values(scriptNodesIndex)) {
    let lastScriptNode = scriptNodes.pop();
    scriptNodes.reverse().forEach((scriptNode) => {
      let scriptContent = (scriptNode.content || []).join(" ");
      scriptContent = scriptContent.trim();
      if (scriptContent.slice(-1) !== ";") {
        scriptContent += ";";
      }
      lastScriptNode.content = lastScriptNode.content || [];
      lastScriptNode.content.unshift(scriptContent);
      scriptNode.tag = false;
      scriptNode.content = [];
    });
  }
  return tree;
}
export {
  mergeScripts as default
};
//# sourceMappingURL=mergeScripts-QJTZW6Q2.js.map
