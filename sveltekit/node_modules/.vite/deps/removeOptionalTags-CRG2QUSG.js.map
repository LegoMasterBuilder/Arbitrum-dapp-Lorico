{
  "version": 3,
  "sources": ["../../.pnpm/htmlnano@2.1.1_postcss@8.4.38_terser@5.31.1_typescript@5.4.5/node_modules/htmlnano/lib/modules/removeOptionalTags.mjs"],
  "sourcesContent": ["import { isComment } from '../helpers.mjs';\n\nconst startWithWhitespacePattern = /^\\s+/;\n\nconst bodyStartTagCantBeOmittedWithFirstChildTags = new Set(['meta', 'link', 'script', 'style']);\nconst tbodyStartTagCantBeOmittedWithPrecededTags = new Set(['tbody', 'thead', 'tfoot']);\nconst tbodyEndTagCantBeOmittedWithFollowedTags = new Set(['tbody', 'tfoot']);\n\nfunction isEmptyTextNode(node) {\n    if (typeof node === 'string' && node.trim() === '') {\n        return true;\n    }\n\n    return false;\n}\n\nfunction isEmptyNode(node) {\n    if (!node.content) {\n        return true;\n    }\n\n    if (node.content.length) {\n        return !node.content.filter(n => typeof n === 'string' && isEmptyTextNode(n) ? false : true).length;\n    }\n\n    return true;\n}\n\nfunction getFirstChildTag(node, nonEmpty = true) {\n    if (node.content && node.content.length) {\n        if (nonEmpty) {\n            for (const childNode of node.content) {\n                if (childNode.tag) return childNode;\n                if (typeof childNode === 'string' && !isEmptyTextNode(childNode)) return childNode;\n            }\n        } else {\n            return node.content[0] || null;\n        }\n    }\n\n    return null;\n}\n\nfunction getPrevNode(tree, currentNodeIndex, nonEmpty = false) {\n    if (nonEmpty) {\n        for (let i = currentNodeIndex - 1; i >= 0; i--) {\n            const node = tree[i];\n            if (node.tag) return node;\n            if (typeof node === 'string' && !isEmptyTextNode(node)) return node;\n        }\n    } else {\n        return tree[currentNodeIndex - 1] || null;\n    }\n\n    return null;\n}\n\nfunction getNextNode(tree, currentNodeIndex, nonEmpty = false) {\n    if (nonEmpty) {\n        for (let i = currentNodeIndex + 1; i < tree.length; i++) {\n            const node = tree[i];\n            if (node.tag) return node;\n            if (typeof node === 'string' && !isEmptyTextNode(node)) return node;\n        }\n    } else {\n        return tree[currentNodeIndex + 1] || null;\n    }\n\n    return null;\n}\n\n// Specification https://html.spec.whatwg.org/multipage/syntax.html#optional-tags\n/** Remove optional tag in the DOM */\nexport default function removeOptionalTags(tree) {\n    tree.forEach((node, index) => {\n        if (!node.tag) return node;\n\n        if (node.attrs && Object.keys(node.attrs).length) return node;\n\n        // const prevNode = getPrevNode(tree, index);\n        const prevNonEmptyNode = getPrevNode(tree, index, true);\n        const nextNode = getNextNode(tree, index);\n        const nextNonEmptyNode = getNextNode(tree, index, true);\n        const firstChildNode = getFirstChildTag(node, false);\n        const firstNonEmptyChildNode = getFirstChildTag(node);\n\n        /**\n         * An \"html\" element's start tag may be omitted if the first thing inside the \"html\" element is not a comment.\n         * An \"html\" element's end tag may be omitted if the \"html\" element is not IMMEDIATELY followed by a comment.\n         */\n        if (node.tag === 'html') {\n            let isHtmlStartTagCanBeOmitted = true;\n            let isHtmlEndTagCanBeOmitted = true;\n\n            if (typeof firstNonEmptyChildNode === 'string' && isComment(firstNonEmptyChildNode)) {\n                isHtmlStartTagCanBeOmitted = false;\n            }\n\n            if (typeof nextNonEmptyNode === 'string' && isComment(nextNonEmptyNode)) {\n                isHtmlEndTagCanBeOmitted = false;\n            }\n\n            if (isHtmlStartTagCanBeOmitted && isHtmlEndTagCanBeOmitted) {\n                node.tag = false;\n            }\n        }\n\n        /**\n         * A \"head\" element's start tag may be omitted if the element is empty, or if the first thing inside the \"head\" element is an element.\n         * A \"head\" element's end tag may be omitted if the \"head\" element is not IMMEDIATELY followed by ASCII whitespace or a comment.\n         */\n        if (node.tag === 'head') {\n            let isHeadStartTagCanBeOmitted = false;\n            let isHeadEndTagCanBeOmitted = true;\n\n            if (\n                isEmptyNode(node) ||\n                firstNonEmptyChildNode && firstNonEmptyChildNode.tag\n            ) {\n                isHeadStartTagCanBeOmitted = true;\n            }\n\n            if (\n                (nextNode && typeof nextNode === 'string' && startWithWhitespacePattern.test(nextNode)) ||\n                (nextNonEmptyNode && typeof nextNonEmptyNode === 'string' && isComment(nextNode))\n            ) {\n                isHeadEndTagCanBeOmitted = false;\n            }\n\n            if (isHeadStartTagCanBeOmitted && isHeadEndTagCanBeOmitted) {\n                node.tag = false;\n            }\n        }\n\n\n        /**\n         * A \"body\" element's start tag may be omitted if the element is empty, or if the first thing inside the \"body\" element is not ASCII whitespace or a comment, except if the first thing inside the \"body\" element is a \"meta\", \"link\", \"script\", \"style\", or \"template\" element.\n         * A \"body\" element's end tag may be omitted if the \"body\" element is not IMMEDIATELY followed by a comment.\n         */\n        if (node.tag === 'body') {\n            let isBodyStartTagCanBeOmitted = true;\n            let isBodyEndTagCanBeOmitted = true;\n\n            if (\n                (typeof firstChildNode === 'string' && startWithWhitespacePattern.test(firstChildNode)) ||\n                (typeof firstNonEmptyChildNode === 'string' && isComment(firstNonEmptyChildNode))\n            ) {\n                isBodyStartTagCanBeOmitted = false;\n            }\n\n            if (firstNonEmptyChildNode && firstNonEmptyChildNode.tag && bodyStartTagCantBeOmittedWithFirstChildTags.has(firstNonEmptyChildNode.tag)) {\n                isBodyStartTagCanBeOmitted = false;\n            }\n\n            if (nextNode && typeof nextNode === 'string' && isComment(nextNode)) {\n                isBodyEndTagCanBeOmitted = false;\n            }\n\n            if (isBodyStartTagCanBeOmitted && isBodyEndTagCanBeOmitted) {\n                node.tag = false;\n            }\n        }\n\n        /**\n         * A \"colgroup\" element's start tag may be omitted if the first thing inside the \"colgroup\" element is a \"col\" element, and if the element is not IMMEDIATELY preceded by another \"colgroup\" element. It can't be omitted if the element is empty.\n         * A \"colgroup\" element's end tag may be omitted if the \"colgroup\" element is not IMMEDIATELY followed by ASCII whitespace or a comment.\n         */\n        if (node.tag === 'colgroup') {\n            let isColgroupStartTagCanBeOmitted = false;\n            let isColgroupEndTagCanBeOmitted = true;\n\n            if (firstNonEmptyChildNode && firstNonEmptyChildNode.tag && firstNonEmptyChildNode.tag === 'col') {\n                isColgroupStartTagCanBeOmitted = true;\n            }\n\n            if (prevNonEmptyNode && prevNonEmptyNode.tag && prevNonEmptyNode.tag === 'colgroup') {\n                isColgroupStartTagCanBeOmitted = false;\n            }\n\n            if (\n                (nextNode && typeof nextNode === 'string' && startWithWhitespacePattern.test(nextNode)) ||\n                (nextNonEmptyNode && typeof nextNonEmptyNode === 'string' && isComment(nextNonEmptyNode))\n            ) {\n                isColgroupEndTagCanBeOmitted = false;\n            }\n\n            if (isColgroupStartTagCanBeOmitted && isColgroupEndTagCanBeOmitted) {\n                node.tag = false;\n            }\n        }\n\n        /**\n         * A \"tbody\" element's start tag may be omitted if the first thing inside the \"tbody\" element is a \"tr\" element, and if the element is not immediately preceded by another \"tbody\", \"thead\" or \"tfoot\" element. It can't be omitted if the element is empty.\n         * A \"tbody\" element's end tag may be omitted if the \"tbody\" element is not IMMEDIATELY followed by a \"tbody\" or \"tfoot\" element.\n         */\n        if (node.tag === 'tbody') {\n            let isTbodyStartTagCanBeOmitted = false;\n            let isTbodyEndTagCanBeOmitted = true;\n\n            if (firstNonEmptyChildNode && firstNonEmptyChildNode.tag && firstNonEmptyChildNode.tag === 'tr') {\n                isTbodyStartTagCanBeOmitted = true;\n            }\n\n            if (prevNonEmptyNode && prevNonEmptyNode.tag && tbodyStartTagCantBeOmittedWithPrecededTags.has(prevNonEmptyNode.tag)) {\n                isTbodyStartTagCanBeOmitted = false;\n            }\n\n            if (nextNonEmptyNode && nextNonEmptyNode.tag && tbodyEndTagCantBeOmittedWithFollowedTags.has(nextNonEmptyNode.tag)) {\n                isTbodyEndTagCanBeOmitted = false;\n            }\n\n            if (isTbodyStartTagCanBeOmitted && isTbodyEndTagCanBeOmitted) {\n                node.tag = false;\n            }\n        }\n\n        if (node.content && node.content.length) {\n            removeOptionalTags(node.content);\n        }\n\n        return node;\n    });\n\n    return tree;\n}\n"],
  "mappings": "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",
  "names": []
}
