import "./chunk-P3KJJCU4.js";

// node_modules/.pnpm/htmlnano@2.1.1_postcss@8.4.38_terser@5.31.1_typescript@5.4.5/node_modules/htmlnano/lib/modules/collapseBooleanAttributes.mjs
var htmlBooleanAttributes = /* @__PURE__ */ new Set([
  "allowfullscreen",
  "allowpaymentrequest",
  "allowtransparency",
  "async",
  "autofocus",
  "autoplay",
  "checked",
  "compact",
  "controls",
  "declare",
  "default",
  "defaultchecked",
  "defaultmuted",
  "defaultselected",
  "defer",
  "disabled",
  "enabled",
  "formnovalidate",
  "hidden",
  "indeterminate",
  "inert",
  "ismap",
  "itemscope",
  "loop",
  "multiple",
  "muted",
  "nohref",
  "nomodule",
  "noresize",
  "noshade",
  "novalidate",
  "nowrap",
  "open",
  "pauseonexit",
  "playsinline",
  "readonly",
  "required",
  "reversed",
  "scoped",
  "seamless",
  "selected",
  "sortable",
  "truespeed",
  "typemustmatch",
  "visible"
]);
var amphtmlBooleanAttributes = /* @__PURE__ */ new Set([
  "⚡",
  "amp",
  "⚡4ads",
  "amp4ads",
  "⚡4email",
  "amp4email",
  "amp-custom",
  "amp-boilerplate",
  "amp4ads-boilerplate",
  "amp4email-boilerplate",
  "allow-blocked-ranges",
  "amp-access-hide",
  "amp-access-template",
  "amp-keyframes",
  "animate",
  "arrows",
  "data-block-on-consent",
  "data-enable-refresh",
  "data-multi-size",
  "date-template",
  "disable-double-tap",
  "disable-session-states",
  "disableremoteplayback",
  "dots",
  "expand-single-section",
  "expanded",
  "fallback",
  "first",
  "fullscreen",
  "inline",
  "lightbox",
  "noaudio",
  "noautoplay",
  "noloading",
  "once",
  "open-after-clear",
  "open-after-select",
  "open-button",
  "placeholder",
  "preload",
  "reset-on-refresh",
  "reset-on-resize",
  "resizable",
  "rotate-to-fullscreen",
  "second",
  "standalone",
  "stereo",
  "submit-error",
  "submit-success",
  "submitting",
  "subscriptions-actions",
  "subscriptions-dialog"
]);
var missingValueDefaultEmptyStringAttributes = {
  // https://html.spec.whatwg.org/#attr-media-preload
  audio: {
    preload: "auto"
  },
  video: {
    preload: "auto"
  }
};
var tagsHasMissingValueDefaultEmptyStringAttributes = new Set(Object.keys(missingValueDefaultEmptyStringAttributes));
function onAttrs(options, moduleOptions) {
  return (attrs, node) => {
    if (!node.tag) return attrs;
    const newAttrs = attrs;
    if (tagsHasMissingValueDefaultEmptyStringAttributes.has(node.tag)) {
      const tagAttributesCanBeReplacedWithEmptyString = missingValueDefaultEmptyStringAttributes[node.tag];
      for (const attributesCanBeReplacedWithEmptyString of Object.keys(tagAttributesCanBeReplacedWithEmptyString)) {
        if (Object.prototype.hasOwnProperty.call(attrs, attributesCanBeReplacedWithEmptyString) && attrs[attributesCanBeReplacedWithEmptyString] === tagAttributesCanBeReplacedWithEmptyString[attributesCanBeReplacedWithEmptyString]) {
          attrs[attributesCanBeReplacedWithEmptyString] = true;
        }
      }
    }
    for (const attrName of Object.keys(attrs)) {
      if (attrName === "visible" && node.tag.startsWith("a-")) {
        continue;
      }
      if (htmlBooleanAttributes.has(attrName)) {
        newAttrs[attrName] = true;
      }
      if (typeof newAttrs[attrName] !== "string") continue;
      if (moduleOptions.amphtml && amphtmlBooleanAttributes.has(attrName) && attrs[attrName] === "") {
        newAttrs[attrName] = true;
      }
      if (attrs[attrName] === "") {
        newAttrs[attrName] = true;
      }
      if (attrName.toLowerCase() === "crossorigin" && attrs[attrName] === "anonymous") {
        newAttrs[attrName] = true;
      }
    }
    return newAttrs;
  };
}
export {
  onAttrs
};
//# sourceMappingURL=collapseBooleanAttributes-MBRVJZP6.js.map
